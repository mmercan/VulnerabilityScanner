console.info('OSS vulnerability Scanner powered by https://ossindex.sonatype.org/')

import task = require('azure-pipelines-task-lib');
import tl = require('azure-pipelines-task-lib/task');
import trm = require('azure-pipelines-task-lib/toolrunner');
import fs = require('fs');
import path = require('path');
import { NugetExtract, QueryVulnerabilities, ReportToConsole } from 'vulnerability-scanner';
import { error } from 'azure-pipelines-task-lib';

var failifseverityhigher: string | undefined;

async function run() {
    console.info('OSS vulnerability Scanner powered by https://ossindex.sonatype.org/')

    const filename: string | undefined = task.getInput('fileName', true);
    let dir = tl.getVariable("System.DefaultWorkingDirectory");
    if(!dir){dir = "./"}
    if (!filename) {
        console.error("File not  Found");
    } else {


        let searchFordepsjson: boolean = task.getBoolInput("searchdepsjsoninprojects", false);

        failifseverityhigher = task.getInput("failifseverityhigher", false);
        if (!failifseverityhigher) { failifseverityhigher = "None"; }
        let projects: string[] = [];
        
        const filePath: any = tl.findMatch(dir, filename)[0];

        console.info("Path is " + filePath);
        
        const tt = new NugetExtract(filePath);
        const query = new QueryVulnerabilities();
        await query.QueryAllPackages(tt.projects);
    
        ReportToConsole(tt.projects);
        console.info('time', new Date().toTimeString())

        // if (filePath.toLocaleLowerCase().endsWith('sln')) {
        //     console.info("Checking Projects in the Solution");
        //     // projects = analyzeSolution(filePath);
        // } else if (filePath.toLocaleLowerCase().endsWith('csproj')) {
        //     console.info("Checking Projects in the Solution");
        //     projects.push(filePath);
        // }
    }
}


run();