import fs = require('fs-extra');
import path = require('path');
import xml2js = require('xml2js');
import { IPackage, IVulnerability, IProject, IProjectDic } from './models';

export default class NugetExtract {
  parser = new xml2js.Parser();
  projects: IProjectDic = {};

  constructor(private slnLocation: string) {
    if (slnLocation.toLocaleLowerCase().endsWith('sln')) {
      console.info('working with solution ' + slnLocation);
      this.projects = this.extractProjectFromSln();
      for (const prj in this.projects) {
        this.AddPackagesToProject(this.projects[prj]);
      }
    } else if (slnLocation.toLocaleLowerCase().endsWith('csproj')) {
      console.info('working with project ' + slnLocation);
    }
    //  ReportToConsole(this.projects);
  }

  public extractProjectFromSln(): IProjectDic {
    const projects: IProjectDic = {};
    const slnfolder = path.dirname(this.slnLocation);
    const filecontent = fs.readFileSync(this.slnLocation, 'utf8');

    let i = 0;
    filecontent.split(/\r?\n/).forEach((line) => {
      if (!line.startsWith('Project')) {
        return;
      }
      const regex = new RegExp('(.*) = "(.*?)", "(.*?.(cs|vb)proj)"');
      const match = regex.exec(line);
      if (match && match.length > 0) {
        i++;
        const fullprjlocation = path.join(slnfolder, match[3]);

        projects[fullprjlocation] = {
          results: {},
          projectLocation: fullprjlocation,
        };
      }
    });
    return projects;
  }

  public AddPackagesToProject(project: IProject) {
    const packages: any = {};
    const filecontent = fs.readFileSync(project.projectLocation, 'utf8');
    // console.info("AddPackagesToProject :" + project.projectLocation);
    // let i = 0;
    this.parser.parseString(filecontent, (err: any, result: any) => {
      if (result.Project && result.Project.ItemGroup) {
        result.Project.ItemGroup.forEach((itmgrp: any) => {
          if (itmgrp.PackageReference) {
            itmgrp.PackageReference.forEach((reff: any) => {
              let coordinate = 'pkg:nuget/';
              // "pkg:nuget/EnterpriseLibrary.Common@6.0.1304"
              if (reff.$.Include) {
                coordinate += reff.$.Include + '@';
                if (reff.$.Version) {
                  coordinate += reff.$.Version;

                  if (!packages[coordinate]) {
                    packages[coordinate] = {};
                  }
                } else {
                  console.warn(reff.$.Include + "Package doesn't have version number removed from Query");
                }
              }
            });
          }
        });
      }
    });

    if (!project.results) {
      project.results = {};
    }
    for (const pack in packages) {
      project.results[pack] = { coordinates: '', description: '', reference: '', vulnerabilities: [] };
    }
  }
}
