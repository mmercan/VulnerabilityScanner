import { IPackage, IVulnerability, IProject, IProjectDic } from './models';
// import * as Table from 'tty-table'
// import  * as Table  from 'cli-table';

const Table = require('cli-table');

export function ReportToConsole(projects: IProjectDic) {
  for (const prjName in projects) {
    const prj = projects[prjName];

    console.info('=====================================================================================');
    console.info(prjName);
    const packagereports: any[] = [];
    const packagereportsArray: any[] = [];

    for (const pckName in prj.results) {
      packagereports.push({
        Name: pckName,
        Severity: prj.results[pckName].highestSeverity,
        Count: prj.results[pckName].vulnerabilityCount,
      });

      packagereportsArray.push([pckName,prj.results[pckName].highestSeverity , prj.results[pckName].vulnerabilityCount])
    }
    
    // try{
    // console.table(packagereports);
    // }catch(err){    
    // reporttable(packagereports);
    reporttable2(packagereportsArray);
   // }
  }
}


function reporttable2(packagereports: any[]) {

  const table = new Table({
    head: ['Name','Severity' ,'Count'],
    rows: packagereports
  })
  console.log(table.toString());

}

// function reporttable(packagereports: any[]) {

//   const header = [
//   {
//     value: "Name",
//     color: "red",
//     width: "100%"
//   },
//   {
//     value: "Severity",
//     width: 15,
//     formatter(value: any) {
//       if (value === "NONE") {
//         value = (this as any).style(value, "bgGreen", "black")
//       } else if (value === "MEDIUM") {
//         value = (this as any).style(value, "bgYellow", "black")
//       } else {
//         value = (this as any).style(value, "bgRed", "white")
//       }
//       return value
//     }
//   },
//   {
//     value: "Count",
//     width: 10,
//   }]

//   const options = {
//     borderStyle: "solid", // only "dashed" works with iife module
//     borderColor: "green",
//     paddingBottom: 0,
//     headerAlign: "center",
//     align: "center",
//     color: "white",
//     truncate: "...",
//     width: "90%"
//   }


//   const out = Table(header,packagereports,options).render()
//   console.log(out);

// }

export default class VulnerabilityReports { }

function getVulnerableProjects(projects: IProjectDic): string {
  let status = 'OK';
  for (const prj in projects) {
    for (const pck in projects[prj].results) {
      if (projects[prj].results[pck].vulnerabilities && projects[prj].results[pck].vulnerabilities.length > 0) {
        //  this.vulnerableProjects[prjshort] = this.projects[prj].packages[pck];
        status = 'WARN';
      }
    }
  }
  return status;
}

export function getHtmlAnalysisReport(projects: IProjectDic): string {
  const status = getVulnerableProjects(projects);
  const qgStyle = `background-color: ${getvulnerabilityColor(status)};
    padding: 4px 12px;
    color: #fff;
    letter-spacing: 0.02em;
    line-height: 24px;
    font-weight: 600;
    font-size: 12px;
    margin-left: 15px;`;

  //     var html = `<div style="padding-top: 8px;">
  //     <span>${this.projectName ? this.projectName + ' ' : ''}Quality Gate</span>
  //     <span style="${qgStyle}">
  //       ${formatMeasure(this.status, 'LEVEL')}
  //     </span>
  //   </div>`;
  let html = ``;
  for (const prj in projects) {
    html += `<p>${prj} </p>
        <dl>`;

    for (const pck in projects[prj].results) {
      if (projects[prj].results[pck].vulnerabilities && projects[prj].results[pck].vulnerabilities.length > 0) {
        html += `<dt>${pck}</dt>`;

        projects[prj].results[pck].vulnerabilities.forEach((vul: IVulnerability) => {
          html += `<dd> <strong> ${vul.severity}  </strong> ${vul.description}</dd>`;
        });
      }
    }
    html += `</dl>`;
  }

  return html;
}

function getvulnerabilityColor(status: string) {
  switch (status) {
    case 'OK':
      return '#00aa00';
    case 'WARN':
      return '#ed7d20';
    case 'ERROR':
      return '#d4333f';
    case 'NONE':
      return '#b4b4b4';
    default:
      return '#b4b4b4';
  }
}
