import { IPackage, IVulnerability, IProject, IProjectDic } from './models'


export function ReportToConsole(projects:IProjectDic)
{
    for (let prjName in projects) {
        var prj = projects[prjName];
        
        console.info("=====================================================================================")
        console.info(prjName)
       let packagereports:any[] =[];
        for (let pckName in prj.results) {
          //  console.info("==> "+ pckName)
          //  console.info("     vulnerabilityText:"+ prj.results[pckName].highestSeverity +" => "+ prj.results[pckName].vulnerabilityCount)
         
          //  var packege = pckName.padEnd(80) + prj.results[pckName].highestSeverity?.padEnd(10)
          //  console.info("     "+ packege);
          packagereports.push({
            Name:pckName, 
            Severity:prj.results[pckName].highestSeverity,
            Count: prj.results[pckName].vulnerabilityCount 
            });
        }

        console.table(packagereports);
    }
  
}

export default class VulnerabilityReports {



}

function getVulnerableProjects(projects:IProjectDic):string {
    //var vulnerableProjects: any = {};
    let status = 'OK';
    for (let prj in projects) {
        for (let pck in projects[prj].results) {
            if (projects[prj].results[pck].vulnerabilities && projects[prj].results[pck].vulnerabilities.length > 0) {
              //  this.vulnerableProjects[prjshort] = this.projects[prj].packages[pck];
                status = "WARN";
            }
        };
    };
    return status;
}

export function getHtmlAnalysisReport(projects:IProjectDic): string {

    let status = getVulnerableProjects(projects);
    const qgStyle = `background-color: ${getvulnerabilityColor(status)};
    padding: 4px 12px;
    color: #fff;
    letter-spacing: 0.02em;
    line-height: 24px;
    font-weight: 600;
    font-size: 12px;
    margin-left: 15px;`;

    //     var html = `<div style="padding-top: 8px;">
    //     <span>${this.projectName ? this.projectName + ' ' : ''}Quality Gate</span>
    //     <span style="${qgStyle}">
    //       ${formatMeasure(this.status, 'LEVEL')}
    //     </span>
    //   </div>`;
    var html = ``;
    for (let prj in projects) {
        html += `<p>${prj} </p>
        <dl>`

        for (let pck in projects[prj].results) {
            if (projects[prj].results[pck].vulnerabilities && projects[prj].results[pck].vulnerabilities.length > 0) {
                html += `<dt>${pck}</dt>`;

                projects[prj].results[pck].vulnerabilities.forEach((vul: IVulnerability) => {
                    html += `<dd> <strong> ${vul.severity}  </strong> ${vul.description}</dd>`;
                });
            }
        }
        html += `</dl>`;
    }

    return html;
}

function getvulnerabilityColor(status:string) {
    switch (status) {
        case 'OK':
            return '#00aa00';
        case 'WARN':
            return '#ed7d20';
        case 'ERROR':
            return '#d4333f';
        case 'NONE':
            return '#b4b4b4';
        default:
            return '#b4b4b4';
    }
}